# -*- coding: utf-8 -*-
"""Copy of YOLOv4-Roboflow-PyTorch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GSqN2UF2weUpZg4YLu4_CoQv5OQOehBL

# Introduction

In this notebook, we implement [YOLOv4](https://arxiv.org/pdf/2004.10934.pdf) for training on your own dataset in PyTorch.

We also recommend reading our blog post on [Training YOLOv4 on custom data](https://blog.roboflow.ai/training-yolov4-on-a-custom-dataset/) side by side.

We will take the following steps to implement YOLOv4 on our custom data:
* Set up YOLOv4 environment
* Download Custom Dataset via Roboflow
* Train Custom YOLOv4 detector
* Reload Custom YOLOv4 detector weights for inference

When you are done you will have a custom detector that you can use. It will make inference like this:

#### ![Chesse Image](https://i.imgur.com/cGOxffX.png)

### **Reach out for support**

If you run into any hurdles on your own data set or just want to share some cool results in your own domain, [reach out!](https://roboflow.ai/contact) 


#### ![Roboflow Workmark](https://i.imgur.com/WHFqYSJ.png)

# Set up YOLOv4 Environment
"""

!git clone https://github.com/mindycha/pytorch-YOLOv4.git

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/pytorch-YOLOv4
!pip install -r requirements.txt
# This restarts the runtime--ignore any error messages
import os

# Commented out IPython magic to ensure Python compatibility.
# download yolov4 weights that have already been converted to PyTorch
# %cd /content/pytorch-YOLOv4/cfg/
!pip install --upgrade --no-cache-dir gdown
!gdown https://drive.google.com/uc?id=1fcbR0bWzYfIEdLJPzOsn4R5mlvR6IQyA

"""# Download Custom Dataset

## Export Your Dataset from Roboflow

Roboflow enables you to export your dataset in any format you need - including for this notebook.

Create a [free account](https://app.roboflow.ai). Upload your private dataset. Generate a version (applying any preprocessing and augmentations you desire). Create an export. Select **YOLOv4 PyTorch** as the export format. Click **"Show Download code"**, copy your link, and paste it in the next cell. Magic.
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/
# REPLACE this link with your Roboflow dataset (export as YOLOv4 PyTorch format)
!curl -L "https://app.roboflow.com/ds/faHJoLNK5R?key=4oJvRggnUU" > roboflow.zip; unzip roboflow.zip; rm roboflow.zip

# Commented out IPython magic to ensure Python compatibility.
# %cp train/_annotations.txt train/train.txt
# %cp train/_annotations.txt train.txt
# %mkdir data
# %cp valid/_annotations.txt data/val.txt
# %cp valid/*.jpg train/

def file_len(fname):
  with open(fname) as f:
    for i, l in enumerate(f):
      pass
  return i + 1

num_classes = file_len('train/_classes.txt')

print(num_classes)

"""# Train Custom Detector"""

#start training
#-b batch size (you should keep this low (2-4) for training to work properly)
#-s number of subdivisions in the batch, this was more relevant for the darknet framework
#-l learning rate
#-g direct training to the GPU device
#pretrained invoke the pretrained weights that we downloaded above
#classes - number of classes
#dir - where the training data is
#epoch - how long to train for
!python ./pytorch-YOLOv4/train.py -b 2 -s 1 -l 0.001 -g 0 -pretrained /content/pytorch-YOLOv4/cfg/yolov4.conv.137.pth -classes {num_classes} -dir ./train -epochs 36

"""# Load Trained Weights for Custom Detection

You can also use this to load previously saved weights!
"""

#looking at the weights that our model has saved during training
!ls checkpoints

#choose random test image
import os
test_images = [f for f in os.listdir('test') if f.endswith('.jpg')]
import random
img_path = "test/" + random.choice(test_images);

# Commented out IPython magic to ensure Python compatibility.
# %%time
# ##change the epoch here to the one you would like to use for inference
# !python /content/pytorch-YOLOv4/models.py {num_classes} checkpoints/Yolov4_epoch35.pth {img_path} test/_classes.txt

#visualize inference
from IPython.display import Image
Image('predictions.jpg')

from google.colab import drive
drive.mount('/content/drive')